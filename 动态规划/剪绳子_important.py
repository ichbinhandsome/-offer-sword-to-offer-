'''
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/jian-sheng-zi-lcof
'''
class Solution:
    def cuttingRope(self, n: int) -> int:
        if n == 2: return 1
        if n == 3: return 2

        #第一种动态规划
        #对于长度大于3的绳子进行动态规划（长度小于3的在这里不成立）
        dp = [0 for i in range(n+1)]
        #提前定义好的base (dp[i] i<= 3 时并不表示长度为i的绳子分割的最大乘积)
        dp[0], dp[1], dp[2], dp[3]  = 0, 1, 2, 3 #对于已经切好的绳子， 长度为2的子绳子最大能结果为2， 因为要么再继续分割他1*1=1，要么保留他2； 同理，对于长度为3的子绳子， 要么保留它3，要么分割他1*dp[2]=2，取最大值3.
        for i in range(4,n+1):
            for j in range(1,i//2+1):
                #j从1开始代表将长度i绳子从长度1开始分割，所以长度为i的绳子至少被分割一次，答案合理
                dp[i] = max(dp[j]*dp[i-j], dp[i])
        return dp[-1]

        #第二种动态规划
        #我们考虑最后一步的情况，即最后剪的一下，会把绳子分为两部分，且两部分的结果互不影响
        # 定义 dp[i] 表示长度i的绳子能得到的最大乘积
        # 则 dp[i] 等于 在绳子区间[0, i)之间剪开的两部分乘积最大值
        # 如果剪开位置为k，则区间分为[0, k)和[k, i)两部分
        # 第一部分长度为k, 第二部分长度为i-k
        # 第二部分存在剪和不剪两种情况，剪的时候值为dp[i-k]，不剪的时候取（i-k)
        # 于是得到状态转换方程：
        # dp[i] = max{ k * dp[i-k], k * (i-k)} (2<=k<=i)
        dp = [0] * (n+1)
        dp[0], dp[1] = 0, 1
        for i in range(2, n+1):
            for j in range(1, i):
                dp[i] = max(dp[i], dp[i-j]*j, (i-j)*j)
        return dp[-1]




